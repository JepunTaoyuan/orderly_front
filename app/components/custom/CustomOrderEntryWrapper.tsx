import React, { useState, useEffect, useCallback } from "react";
import { toast } from "react-hot-toast";
import {
  useSymbolsInfo,
  useMarkPrice,
  useAccount,
  useSymbolLeverage,
} from "@orderly.network/hooks";
import { AccountStatusEnum } from "@orderly.network/types";
import { useMultiChainWallet } from "@/hooks/custom/useMultiChainWallet";
import {
  gridBotService,
  validateGridConfig,
} from "../../services/gridBot.client";
import { CustomOrderEntry } from "./CustomOrderEntry";

// Type definitions
interface OrderData {
  direction: "LONG" | "SHORT" | "BOTH";
  upper_bound: number;
  lower_bound: number;
  grid_type: "ARITHMETIC" | "GEOMETRIC";
  grid_ratio?: number;
  grid_levels: number;
  total_margin: number;
  stop_bot_price?: number;
  stop_top_price?: number;
}

interface CustomOrderEntryWrapperProps {
  symbol?: string;
}

export const CustomOrderEntryWrapper = ({
  symbol = "PERP_ETH_USDC",
}: CustomOrderEntryWrapperProps): React.ReactNode => {
  // Orderly SDK hooks
  const symbolsInfo = useSymbolsInfo();
  const leverageData = useSymbolLeverage(symbol);
  const markPrice = useMarkPrice(symbol);
  const { state, account } = useAccount();

  // Get connection status and address
  const isConnected = state.status !== AccountStatusEnum.NotConnected;
  const walletAddress = state.address;

  // Local state
  const [isLoading, setIsLoading] = useState(false);

  // Multi-chain wallet hook
  const { chainType, address, signMessage } = useMultiChainWallet(
    state.address || "",
  );

  // Get current price (handle possible different data structures)
  const currentPrice =
    (markPrice?.data as any)?.price ||
    (typeof markPrice?.data === "number" ? markPrice.data : 0) ||
    0;

  // Handle order submission
  const handleOrderSubmit = useCallback(
    async (orderData: OrderData) => {
      setIsLoading(true);

      try {
        const challenge = await gridBotService.getChallenge();
        const handleSign = async () => {
          try {
            const sig = await signMessage(challenge.data.message);
            console.log("Signature:", sig);
            return sig;
          } catch (error) {
            console.error(error);
          }
        };
        const sig = await handleSign();

        // Validate configuration
        const config = {
          ticker: symbol, // Use symbol prop directly
          direction: orderData.direction,
          current_price: Number(currentPrice),
          upper_bound: orderData.upper_bound,
          lower_bound: orderData.lower_bound,
          grid_type: orderData.grid_type,
          grid_ratio: orderData.grid_ratio,
          grid_levels: orderData.grid_levels,
          total_margin: orderData.total_margin,
          stop_bot_price: orderData.stop_bot_price,
          stop_top_price: orderData.stop_top_price,
          user_id: state.accountId || "",
          user_sig: sig || "", // This should be generated by wallet signature
          timestamp: challenge.data.timestamp || 0,
          nonce: challenge.data.nonce || "",
        };

        // Validate grid configuration
        const validation = validateGridConfig(config);
        if (!validation.valid) {
          toast.error(`Configuration error: ${validation.errors.join(", ")}`);
          return;
        }

        // Start grid bot
        const response = await gridBotService.startGrid(config);

        if (response.success) {
          toast.success(
            `Grid bot started successfully! Session ID: ${response.data.session_id}`,
          );
        } else {
          toast.error("Failed to start grid bot");
        }
      } catch (error) {
        console.error("Failed to start grid bot:", error);
        toast.error(
          error instanceof Error ? error.message : "Failed to start grid bot",
        );
      } finally {
        setIsLoading(false);
      }
    },
    [walletAddress, symbol, currentPrice],
  );

  // Show configuration needed message if API key not set

  // Show loading state
  if (isLoading) {
    return (
      <div
        className="oui-box oui-p-4 oui-rounded-2xl oui-bg-base-9"
        style={{ width: "100%" }}
      >
        <div className="oui-text-center oui-text-base-contrast-54">
          <div className="oui-mb-4">
            <svg
              className="oui-w-16 oui-h-16 oui-mx-auto oui-text-primary-darken oui-animate-spin"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
          </div>
          <p className="oui-text-sm">Starting Grid Bot...</p>
        </div>
      </div>
    );
  }

  return (
    <CustomOrderEntry
      symbol={symbol}
      currentPrice={currentPrice}
      onOrderSubmit={handleOrderSubmit}
      symbolLeverage={leverageData?.maxLeverage}
    />
  );
};

export default CustomOrderEntryWrapper;
